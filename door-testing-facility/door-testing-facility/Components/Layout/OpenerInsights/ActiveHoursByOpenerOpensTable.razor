@inject ReaderEventService ReaderEventService

<MudTable @ref=table Class="pa-6" Style="padding-top:0px !important" T="DateTime" Items="ReaderEventService.GetAllActiveHours()" Height="256px" Hover="true" Breakpoint="Breakpoint.Sm" Dense="true" RowClass="cursor-pointer" FixedHeader="true">
    <ToolBarContent>
        <MudStack Row=true Style="justify-content:space-between;width: 100%">
            <MudText Typo="Typo.h6">Active Hours by Doors Opened | @ReaderEventService.SelectedOpener</MudText>
            <MudToggleIconButton @bind-Toggled=Fullscreen ToggledIcon="@Icons.Material.Filled.FullscreenExit" Icon="@Icons.Material.Filled.Fullscreen"></MudToggleIconButton>
        </MudStack>
    </ToolBarContent>
    <HeaderContent>
        <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<DateTime, object>(x=>x)">Time</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<DateTime, object>(x=>ReaderEventService.GetFilteredEvents().Where(e => e.EVENTTIME!.Value.Hour == x.Hour && e.IDHASH == ReaderEventService.SelectedOpener).Count())">Times Opened</MudTableSortLabel></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="time">@context.ToShortTimeString()</MudTd>
        <MudTd DataLabel="opens">@(ReaderEventService.GetFilteredEvents().Where(e => e.EVENTTIME!.Value.Hour == context.Hour && e.IDHASH == ReaderEventService.SelectedOpener).Count())</MudTd>
    </RowTemplate>
</MudTable>

<MudDialog @bind-Visible="Fullscreen" Style=";width:70vw">
    <DialogContent>
        <MudTable @ref=table Class="pa-6" Style="padding-top:0px !important" T="DateTime" Items="ReaderEventService.GetAllActiveHours()" Filter="new Func<DateTime,bool>(FilterFunc)" Height="512px" Hover="true" Breakpoint="Breakpoint.Sm" Dense="true" RowClass="cursor-pointer" FixedHeader="true">
            <ToolBarContent>
                <MudStack Row=true Style="justify-content:space-between;width: 100%">
                    <MudText Typo="Typo.h6">Active Hours by Doors Opened | @ReaderEventService.SelectedOpener</MudText>
                    <MudTextField T="string" @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start"
                                  AdornmentIcon="@Icons.Material.Filled.Search" IconSize="MudBlazor.Size.Medium" Class="mt-0"></MudTextField>
                    <MudToggleIconButton @bind-Toggled=Fullscreen ToggledIcon="@Icons.Material.Filled.FullscreenExit" Icon="@Icons.Material.Filled.Fullscreen"></MudToggleIconButton>
                </MudStack>
            </ToolBarContent>
            <HeaderContent>
                <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<DateTime, object>(x=>x)">Time</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<DateTime, object>(x=>ReaderEventService.GetFilteredEvents().Where(e => e.EVENTTIME!.Value.Hour == x.Hour && e.IDHASH == ReaderEventService.SelectedOpener).Count())">Times Opened</MudTableSortLabel></MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="time">@context.ToShortTimeString()</MudTd>
                <MudTd DataLabel="opens">@(ReaderEventService.GetFilteredEvents().Where(e => e.EVENTTIME!.Value.Hour == context.Hour && e.IDHASH == ReaderEventService.SelectedOpener).Count())</MudTd>
            </RowTemplate>
        </MudTable>
    </DialogContent>
</MudDialog>

@code {
    private MudTable<DateTime> table = new();
    private bool Fullscreen = false;

    private string searchString = string.Empty;

    private bool FilterFunc(DateTime dateTime)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (dateTime.ToShortTimeString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (ReaderEventService.GetFilteredEvents().Where(e => e.EVENTTIME!.Value.Hour == dateTime.Hour && e.IDHASH == ReaderEventService.SelectedOpener).Count().ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    public async Task Refresh()
    {
        StateHasChanged();
    }
}
